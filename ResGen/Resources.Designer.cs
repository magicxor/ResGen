//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResGen {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ResGen.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly &quot;{0}&quot; isn&apos;t fully signed.  Please fully sign this assembly using sn.exe before shipping it to customers..
        /// </summary>
        internal static string AssemblyNotFullySigned {
            get {
                return ResourceManager.GetString("AssemblyNotFullySigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized switch: &quot;{0}&quot;.  Use ResGen /? for usage information..
        /// </summary>
        internal static string BadCommandLineOption {
            get {
                return ResourceManager.GetString("BadCommandLineOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported or invalid escape character in value!  Escape char: &apos;{0}&apos; Name was: &quot;{1}&quot;.
        /// </summary>
        internal static string BadEscape {
            get {
                return ResourceManager.GetString("BadEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file named &quot;{0}&quot; does not have a known extension.  Managed resource files must end in .ResX, .restext, .txt, or .resources. Response files must end in .rsp and be specified as @respFile.rsp..
        /// </summary>
        internal static string BadFileExtensionNotOnWindows {
            get {
                return ResourceManager.GetString("BadFileExtensionNotOnWindows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file named &quot;{0}&quot; does not have a known extension.  Managed resource files must end in .ResX, .restext, .txt, .resources, .resources.dll, .dll or .exe. Response files must end in .rsp and be specified as @respFile.rsp..
        /// </summary>
        internal static string BadFileExtensionOnWindows {
            get {
                return ResourceManager.GetString("BadFileExtensionOnWindows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did not recognize &quot;{0}&quot; as a managed assembly..
        /// </summary>
        internal static string BadImageFormat {
            get {
                return ResourceManager.GetString("BadImageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating strongly typed resource class &quot;{0}&quot;...  .
        /// </summary>
        internal static string BeginSTRClass {
            get {
                return ResourceManager.GetString("BeginSTRClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating strongly typed resource class &quot;{0}.{1}&quot;...  .
        /// </summary>
        internal static string BeginSTRClassNamespace {
            get {
                return ResourceManager.GetString("BeginSTRClassNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Writing resource file...  .
        /// </summary>
        internal static string BeginWriting {
            get {
                return ResourceManager.GetString("BeginWriting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading assembly &quot;{0}&quot; failed.  {1}.
        /// </summary>
        internal static string CannotLoadAssemblyLoadFromFailed {
            get {
                return ResourceManager.GetString("CannotLoadAssemblyLoadFromFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ResGen cannot write assemblies, only read from them. Cannot create assembly &quot;{0}&quot;..
        /// </summary>
        internal static string CannotWriteAssembly {
            get {
                return ResourceManager.GetString("CannotWriteAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not load referenced assembly &quot;{0}&quot;.  Caught a {1} saying &quot;{2}&quot;..
        /// </summary>
        internal static string CantLoadAssembly {
            get {
                return ResourceManager.GetString("CantLoadAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base name of your output file, &quot;{0}&quot;, does not match the base name used by the strongly typed resources, &quot;{1}&quot;.  In order for the strongly typed resources to work correctly, you will need to rename your output file to &quot;{1}.resources&quot;..
        /// </summary>
        internal static string ClassnameMustMatchBasename {
            get {
                return ResourceManager.GetString("ClassnameMustMatchBasename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use /compile &amp; /str simultaneously if you specify a class name or an output file name to the /str switch as well as multiple input files to /compile.  You would end up with duplicate classes or overwrite one of your classes..
        /// </summary>
        internal static string CompileAndSTRDontMix {
            get {
                return ResourceManager.GetString("CompileAndSTRDontMix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /compile is not supported with assemblies (.resources.dll, .dll or .exe) as input.
        ///Use ResGen /? for usage information..
        /// </summary>
        internal static string CompileSwitchNotSupportedForAssemblies {
            get {
                return ResourceManager.GetString("CompileSwitchNotSupportedForAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output file is possibly corrupt.  Deleting &quot;{0}&quot;.
        /// </summary>
        internal static string CorruptOutput {
            get {
                return ResourceManager.GetString("CorruptOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creating the CultureInfo failed for assembly &quot;{2}&quot;.  Note the set of cultures supported is Operating System-dependent, and the Operating System has removed some cultures from time to time (ie, some Serbian cultures are split up in Windows 7).  The culture may be a user-defined custom culture that we can&apos;t currently load on this machine.  Exception info: {0}: {1}.
        /// </summary>
        internal static string CreatingCultureInfoFailed {
            get {
                return ResourceManager.GetString("CreatingCultureInfoFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not delete possibly corrupted output file &quot;{0}&quot;..
        /// </summary>
        internal static string DeleteOutputFileFailed {
            get {
                return ResourceManager.GetString("DeleteOutputFileFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Done..
        /// </summary>
        internal static string DoneDot {
            get {
                return ResourceManager.GetString("DoneDot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two output filenames resolved to the same output path: &quot;{0}&quot;.
        /// </summary>
        internal static string DuplicateOutputFilenames {
            get {
                return ResourceManager.GetString("DuplicateOutputFilenames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate resource key!  Name was: &quot;{0}&quot;.
        /// </summary>
        internal static string DuplicateResourceKey {
            get {
                return ResourceManager.GetString("DuplicateResourceKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} error(s)..
        /// </summary>
        internal static string ErrorCount {
            get {
                return ResourceManager.GetString("ErrorCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t find input file &quot;{0}&quot;.
        /// </summary>
        internal static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while writing the output file &quot;{0}&quot;.
        /// </summary>
        internal static string GenericWriteError {
            get {
                return ResourceManager.GetString("GenericWriteError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Main assembly &quot;{1}&quot; was built improperly.  The manifest resource &quot;{0}&quot; ends in .en-US.resources, when it should end in .resources.  Either rename it to something like foo.resources (and consider using the NeutralResourcesLanguageAtribute on the main assembly), or move it to a US English satellite assembly..
        /// </summary>
        internal static string ImproperlyBuiltMainAssembly {
            get {
                return ResourceManager.GetString("ImproperlyBuiltMainAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Satellite assembly &quot;{2}&quot; was built improperly.  The manifest resource &quot;{0}&quot; will not be found by the ResourceManager.  It must end in &quot;{1}&quot;..
        /// </summary>
        internal static string ImproperlyBuiltSatelliteAssembly {
            get {
                return ResourceManager.GetString("ImproperlyBuiltSatelliteAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected INF file bracket syntax - ResGen does not support text in square brackets.  Bad text: &quot;[{0}&quot;..
        /// </summary>
        internal static string INFFileBracket {
            get {
                return ResourceManager.GetString("INFFileBracket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid command line syntax.  Switch: &quot;{0}&quot;  Bad value: &quot;{1}&quot;.  Use ResGen /? for usage information..
        /// </summary>
        internal static string InvalidCommandLineSyntax {
            get {
                return ResourceManager.GetString("InvalidCommandLineSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found an invalid #ifdef value, &quot;{0}&quot;.  ResGen supports very simple syntax currently, and doesn&apos;t include parentheses, || nor &amp;&amp;..
        /// </summary>
        internal static string InvalidIfdef {
            get {
                return ResourceManager.GetString("InvalidIfdef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid format or contents in input. &quot;{0}&quot; error trying to read input..
        /// </summary>
        internal static string InvalidResX {
            get {
                return ResourceManager.GetString("InvalidResX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify an input &amp; outfile file name like this:
        ///inFile.txt,outFile.resources.
        ///You passed in &quot;{0}&quot;..
        /// </summary>
        internal static string MalformedCompileString {
            get {
                return ResourceManager.GetString("MalformedCompileString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Response files must be line-delimited; &quot;{0}&quot; contains &quot;{1}&quot;..
        /// </summary>
        internal static string MalformedResponseFileEntry {
            get {
                return ResourceManager.GetString("MalformedResponseFileEntry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify response file names like this:
        ///@respFile.rsp
        ///You passed in &quot;{0}&quot;..
        /// </summary>
        internal static string MalformedResponseFileName {
            get {
                return ResourceManager.GetString("MalformedResponseFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (C) Microsoft Corporation.  All rights reserved..
        /// </summary>
        internal static string Microsoft_Copyright_CommandLine_Logo {
            get {
                return ResourceManager.GetString("Microsoft_Copyright_CommandLine_Logo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t verify assembly without a file location..
        /// </summary>
        internal static string MissingFileLocation {
            get {
                return ResourceManager.GetString("MissingFileLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t process file {0} due to being in the Internet or Restricted zone or having the mark of the web on the file, use /allowUntrustedFiles if you want to process these files..
        /// </summary>
        internal static string MOTW {
            get {
                return ResourceManager.GetString("MOTW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You specified multiple response files; at most one is allowed..
        /// </summary>
        internal static string MultipleResponseFiles {
            get {
                return ResourceManager.GetString("MultipleResponseFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When specifying an assembly (.resources.dll, .dll or .exe) as input, an output directory must be specified.
        ///{0} appears to be an output filename but will be treated as a directory name.
        ///Use ResGen /? for usage information..
        /// </summary>
        internal static string MustProvideOutputDirectoryNotFilename {
            get {
                return ResourceManager.GetString("MustProvideOutputDirectoryNotFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This assembly contains neutral resources corresponding to the culture &quot;{0}&quot;. These resources will not be considered neutral in the output format as we are unable to preserve this information. The resources will continue to correspond to &quot;{0}&quot; in the output format..
        /// </summary>
        internal static string NeutralityOfCultureNotPreserved {
            get {
                return ResourceManager.GetString("NeutralityOfCultureNotPreserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found an equals sign at beginning of a line!  Expected a name / value pair like &apos;name = value&apos;.
        /// </summary>
        internal static string NoEquals {
            get {
                return ResourceManager.GetString("NoEquals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found a resource that had a new line in it, but couldn&apos;t find the equal sign within!  Length: {0}  name: &apos;{1}&apos;..
        /// </summary>
        internal static string NoEqualsWithNewLine {
            get {
                return ResourceManager.GetString("NoEqualsWithNewLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing value!  Expected a name / value pair like &apos;name = value&apos;.  Name was &quot;{0}&quot;.
        /// </summary>
        internal static string NoName {
            get {
                return ResourceManager.GetString("NoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t find the linked resources file &quot;{0}&quot; listed in the assembly manifest..
        /// </summary>
        internal static string NoResourcesFileInAssembly {
            get {
                return ResourceManager.GetString("NoResourcesFileInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This assembly claims to contain neutral resources, but doesn&apos;t contain any .resources files as manifest resources.  Either the NeutralResourcesLanguageAttribute was wrong, or there is a build-related problem with this assembly..
        /// </summary>
        internal static string NoResourcesFilesInAssembly {
            get {
                return ResourceManager.GetString("NoResourcesFilesInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only strings can be written to a .txt or .restext file; the value of &apos;{0}&apos; is a &apos;{1}&apos;.
        /// </summary>
        internal static string OnlyString {
            get {
                return ResourceManager.GetString("OnlyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified output directory {0} does not exist..
        /// </summary>
        internal static string OutputDirectoryMustExist {
            get {
                return ResourceManager.GetString("OutputDirectoryMustExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read in {0} resources from &quot;{1}&quot;.
        /// </summary>
        internal static string ReadIn {
            get {
                return ResourceManager.GetString("ReadIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified response file doesn&apos;t exist. You passed in &quot;{0}&quot;..
        /// </summary>
        internal static string ResponseFileDoesntExist {
            get {
                return ResourceManager.GetString("ResponseFileDoesntExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly &quot;{0}&quot; says it is a satellite assembly, but it contains code. Main assemblies shouldn&apos;t specify the assembly culture in their manifest, and satellites should not contain code.  This is almost certainly an error in your build process..
        /// </summary>
        internal static string SatelliteAssemblyContainsCode {
            get {
                return ResourceManager.GetString("SatelliteAssemblyContainsCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This assembly claims to be a satellite assembly, but doesn&apos;t contain any properly named .resources files as manifest resources.  The name of the files should end in {0}.resources.  There is probably a build-related problem with this assembly..
        /// </summary>
        internal static string SatelliteAssemblyContainsNoResourcesFile {
            get {
                return ResourceManager.GetString("SatelliteAssemblyContainsNoResourcesFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly in file &quot;{0}&quot; has an assembly culture, indicating it is a satellite assembly for culture &quot;{1}&quot;.  But satellite assembly simple names must end in &quot;.resources&quot;, while this one&apos;s simple name is &quot;{2}&quot;.  This is either a main assembly with the culture incorrectly set, or a satellite assembly with an incorrect simple name..
        /// </summary>
        internal static string SatelliteOrMalformedAssembly {
            get {
                return ResourceManager.GetString("SatelliteOrMalformedAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specific exception: &quot;{0}&quot;  Message: &quot;{1}&quot;.
        /// </summary>
        internal static string SpecificError {
            get {
                return ResourceManager.GetString("SpecificError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;[strings]&quot; tag is no longer necessary in your text files.  Please remove it..
        /// </summary>
        internal static string StringsTagObsolete {
            get {
                return ResourceManager.GetString("StringsTagObsolete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /str is not supported with assemblies (.resources.dll, .dll or .exe) as input.
        ///Use ResGen /? for usage information..
        /// </summary>
        internal static string STRSwitchNotSupportedForAssemblies {
            get {
                return ResourceManager.GetString("STRSwitchNotSupportedForAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found an #endif without a matching #ifdef..
        /// </summary>
        internal static string UnbalancedEndifs {
            get {
                return ResourceManager.GetString("UnbalancedEndifs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found an #ifdef but not a matching #endif before reaching the end of the file.  Unmatched #ifdef: &quot;{0}&quot;..
        /// </summary>
        internal static string UnbalancedIfdefs {
            get {
                return ResourceManager.GetString("UnbalancedIfdefs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown file extension &quot;{0}&quot; for file &quot;{1}&quot;.
        /// </summary>
        internal static string UnknownFileExtension {
            get {
                return ResourceManager.GetString("UnknownFileExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not create a property on the strongly typed resource class for the resource name &quot;{0}&quot;..
        /// </summary>
        internal static string UnmappableResource {
            get {
                return ResourceManager.GetString("UnmappableResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid or unrecognized UltimateResourceFallbackLocation value in the NeutralResourcesLanguageAttribute for assembly &quot;{1}&quot;. Location: &quot;{0}&quot;.
        /// </summary>
        internal static string UnrecognizedUltimateResourceFallbackLocation {
            get {
                return ResourceManager.GetString("UnrecognizedUltimateResourceFallbackLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft (R) .NET Resource Generator 
        ///[Microsoft .Net Framework, Version {0}]
        ///{1}
        ///
        ///Usage:
        ///   ResGen inputFile.ext [outputFile.ext] [/str:lang[,namespace[,class[,file]]]]
        ///   ResGen [options] /compile inputFile1.ext[,outputFile1.resources] [...]
        ///
        ///Where .ext is .resX, .restext, .txt, or .resources
        ///
        ///Converts files from one resource format to another.  If the output
        ///filename is not specified, inputFile.resources will be used.
        ///Options:
        ////compile        Converts a list of resource files from one forma [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UsageNotOnWindows {
            get {
                return ResourceManager.GetString("UsageNotOnWindows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft (R) .NET Resource Generator 
        ///[Microsoft .Net Framework, Version {0}]
        ///{1}
        ///
        ///Usage:
        ///   ResGen inputFile.ext [outputFile.ext] [/str:lang[,namespace[,class[,file]]]]
        ///   ResGen [options] /compile inputFile1.ext[,outputFile1.resources] [...]
        ///   ResGen inputFile.ext2 [outputDirectory]
        ///Where .ext is .resX, .restext, .txt or .resources
        ///and .ext2 is .resources.dll, .dll or .exe. outputDirectory must already exist.
        ///Resources will be extracted under outputDirectory in resW format.
        ///
        ///Converts files f [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UsageOnWindows {
            get {
                return ResourceManager.GetString("UsageOnWindows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Language names valid for the /str:&lt;language&gt; option are:.
        /// </summary>
        internal static string ValidLanguages {
            get {
                return ResourceManager.GetString("ValidLanguages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} warnings(s)..
        /// </summary>
        internal static string WarningCount {
            get {
                return ResourceManager.GetString("WarningCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Couldn&apos;t write output file &quot;{0}&quot;.
        /// </summary>
        internal static string WriteError {
            get {
                return ResourceManager.GetString("WriteError", resourceCulture);
            }
        }
    }
}
